# -*- coding: utf-8 -*-
"""ACB_Assignment_2_Srijanee_Gupta_MT21231.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FVTig1CAk6CMvVcnX19zEgBzorlygbBq

**Name: Srijanee Gupta**

**Roll No. MT21231**

**Mtech CB | 2021-2023**

## ***Code for computing profile matrix of a set of DNA sequences.***

Given that you have N sequences of DNA and each with L characters, (i)
write a code for computing the profile matrix. (ii) Compute the consensus
string. Print profile matrix and consensus string. In the case of equal
frequency for different nucleotides, use the first entry in this order, ATCG to
construct your consensus motif.
Your program should read N, L and DNA sequences as given below.
Example Inputs:

7

8

gcggaaga

atctttct

gtcacgag

taaaagat

gtagattc

tatacttt

ctctgccg
"""

#Import Libraries
import re
import numpy as np
import pandas as pd

import os
#Set Directory
dir = input("Enter your directory: ")
os.chdir(dir)

# Python3 program to convert a list of integers into a single integer
def convertList(list):
      
    # Converting integer list to string list
    string = [str(i) for i in list]
      
    # Join list items using join()
    result = int("".join(string))
      
    return(result)

#Checking if user input is a valid DNA sequence
def validSeq(seq):
    valid = 'ACTGatgc'
    for letter in seq:
        if letter not in valid:
            return False
    return True

#Taking input from user
lst = []

#Exception Handling
while True:
    try:
        option = int(input("Would you like to input a file or input sequences and other information manually?: 1. FILE    2. MANUAL INPUT  "))
    except ValueError:
        print("Sorry, I didn't understand that.")
        continue

    if option > 2 or option < 1:
        print("Sorry, Invalid response. Try Again!")
        continue
    else:
        break

#Storing sequences and information in variables as per input        
if(option == 2):

  N = int(input("WELCOME!! \n Please enter the number of DNA sequences you will provide us: "))
  L = int(input("What should be the length of these sequences? "))

  while len(lst) < N:
    dna = input("input your sequence:")
    
    if validSeq(dna)==True:

      if len(dna) == L:
        lst.append(dna)
      elif(len(dna) > L):
        print("Length of sequence is longer than predecided length. try again!")
        continue
      elif(len(dna) < L):
        print("Length of sequence is shorter than predecided length. try again!")
        continue
    else:
      print("INVALID ENTRY!! TRY AGAIN!!")
      continue

elif(option==1):
  print("WELCOME!! \n")
  file_name = input("Enter file name(without extension): ")
  extension = input("Enter file extension")
  read_file = pd.read_csv (file_name+'.'+extension,sep='delimiter')
  read_file.to_csv (file_name+'.csv', index=None)

  df1 = pd.read_csv(file_name+".csv",sep='delimiter',header = None,index_col=False,engine='python')
  df1 = df1.transpose()
  lst = df1.iloc[: , 1:]
  lst = lst.values.tolist() #fix this
  
  
  df1 = df1[0].str.split(" ", n =1000 , expand = True)
  N = df1[0]
  N=N.tolist()
  N=convertList(N)
  L = df1[1]
  L=L.tolist()   
  L=convertList(L)
  lst = np.reshape(lst, N)

else:
  print("INVALID ENTRY!! TRY AGAIN")
  

print(N)

print(L)

print(lst)
print("\n")
#Storing input in dataframe
df = pd.DataFrame(lst)

#splitting sequecnes into nucleotides and storing in another dataframe
df2 = df[0].str.split("", n =1000 , expand = True)

#Removing 1st and last column as they are empty
df2 = df2.iloc[: , :-1]
df2 = df2.iloc[: , 1:]

#Empty list to store count of each nucleotide in each position
value=[]

#For loop to count nucleotides in sequences
for i in range(1,L+1):
  col = [x for x in df2[i]]
  countA = col.count('A')
  countT = col.count('T')
  countG = col.count('G')
  countC = col.count('C')
  counta = col.count('a')
  countt = col.count('t')
  countg = col.count('g')
  countc = col.count('c')
  A=countA+counta
  T=countT+countt
  G=countG+countg
  C=countC+countc

  countlist  = [A,T,G,C]
  value.append(countlist)

#PROFILE MATRIX DATAFRAME
profile_matrix = pd.DataFrame(value,columns=['A', 'T', 'G','C'])

profile_matrix.index +=1


#Finding consensus sequence from profile matrix

consensusdf = pd.DataFrame()
consensusdf['Max'] = profile_matrix.idxmax(axis=1)
profile_matrix['Max'] = profile_matrix.idxmax(axis=1)

l =[]
l = consensusdf.values.tolist()
s1=''.join(str(v) for v in l)
s1=s1.replace("'['","")
s1 = s1.replace("']['","")
consensus = s1.replace("']'","")

print("PROFILE MATRIX IS:\n")
print(profile_matrix.transpose())
print("\n")
print("CONSENSUS SEQUENCE IS: ",consensus)